/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class Field {
    constructor(name = "", values = {}, id = "", isMulti = false, isCycle = false, valuesListNotePath = "") {
        this.name = name;
        this.values = values;
        this.id = id;
        this.isCycle = isCycle;
        this.isMulti = isMulti;
        this.valuesListNotePath = valuesListNotePath;
        this.insertNewValue.bind(this);
    }
    insertNewValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            let newKey = 1;
            Object.keys(this.values).forEach(key => {
                if (parseInt(key) && parseInt(key) >= newKey) {
                    newKey = parseInt(key) + 1;
                }
            });
            this.values[newKey.toString()] = value;
            return newKey.toString();
        });
    }
    static copyProperty(target, source) {
        target.id = source.id;
        target.name = source.name;
        target.isCycle = source.isCycle;
        target.isMulti = source.isMulti;
        target.valuesListNotePath = source.valuesListNotePath;
        Object.keys(source.values).forEach(k => {
            target.values[k] = source.values[k];
        });
        Object.keys(target.values).forEach(k => {
            if (!Object.keys(source.values).includes(k)) {
                delete target.values[k];
            }
        });
    }
}

class FieldSetting extends obsidian.Setting {
    constructor(containerEl, property, app, plugin) {
        super(containerEl);
        this.containerEl = containerEl;
        this.property = property;
        this.app = app;
        this.plugin = plugin;
        this.setTextContentWithname();
        this.addEditButton();
        this.addDeleteButton();
    }
    setTextContentWithname() {
        this.infoEl.textContent =
            `${this.property.name}: [${Object.keys(this.property.values).map(k => this.property.values[k]).join(', ')}]`;
    }
    addEditButton() {
        this.addButton((b) => {
            b.setIcon("pencil")
                .setTooltip("Edit")
                .onClick(() => {
                let modal = new FieldSettingsModal(this.app, this.plugin, this.containerEl, this, this.property);
                modal.open();
            });
        });
    }
    addDeleteButton() {
        this.addButton((b) => {
            b.setIcon("trash")
                .setTooltip("Delete")
                .onClick(() => {
                const currentExistingProperty = this.plugin.initialProperties.filter(p => p.id == this.property.id)[0];
                if (currentExistingProperty) {
                    this.plugin.initialProperties.remove(currentExistingProperty);
                }
                this.settingEl.parentElement.removeChild(this.settingEl);
                this.plugin.saveSettings();
            });
        });
    }
    static getValuesListFromNote(notePath, app) {
        return new Promise((resolve, reject) => {
            let values = [];
            const files = app.vault.getMarkdownFiles().filter(mdFile => mdFile.path == notePath);
            if (files.length > 0) {
                const file = files[0];
                app.vault.read(file).then((result) => {
                    result.split('\n').forEach(line => {
                        if (/^(.*)$/.test(line)) {
                            values.push(line.trim());
                        }
                    });
                    resolve(values);
                });
            }
            else {
                resolve([]);
            }
        });
    }
}

class FieldSettingsModal extends obsidian.Modal {
    constructor(app, plugin, parentSettingContainer, parentSetting, property) {
        super(app);
        this.valuesPromptComponents = [];
        this.saved = false;
        this.new = true;
        this.plugin = plugin;
        this.parentSetting = parentSetting;
        this.initialProperty = new Field();
        this.parentSettingContainer = parentSettingContainer;
        if (property) {
            this.new = false;
            this.property = property;
            this.initialProperty.name = property.name;
            this.initialProperty.id = property.id;
            Object.keys(property.values).forEach(k => {
                this.initialProperty.values[k] = property.values[k];
            });
        }
        else {
            let newId = 1;
            this.plugin.initialProperties.forEach(prop => {
                if (parseInt(prop.id) && parseInt(prop.id) >= newId) {
                    newId = parseInt(prop.id) + 1;
                }
            });
            this.property = new Field();
            this.property.id = newId.toString();
            this.initialProperty.id = newId.toString();
        }
    }
    onOpen() {
        if (this.property.name == "") {
            this.titleEl.setText(`Add a property and set predefined`);
        }
        else {
            this.titleEl.setText(`Manage settings values for ${this.property.name}`);
        }
        this.createForm();
    }
    onClose() {
        Object.assign(this.property, this.initialProperty);
        if (!this.new) {
            this.parentSetting.infoEl.textContent =
                `${this.property.name}: [${Object.keys(this.property.values).map(k => this.property.values[k]).join(', ')}]`;
        }
        else if (this.saved) {
            new FieldSetting(this.parentSettingContainer, this.property, this.app, this.plugin);
        }
    }
    setValueListText(header) {
        header.setText(`Preset values: ${Object.values(this.property.values).join(', ')}`);
    }
    createnameInputContainer(parentNode) {
        const propertyNameContainerLabel = parentNode.createDiv();
        propertyNameContainerLabel.setText(`Property Name:`);
        const input = new obsidian.TextComponent(parentNode);
        const name = this.property.name;
        input.setValue(name);
        input.setPlaceholder("Name of the property");
        input.onChange(value => {
            this.property.name = value;
            this.titleEl.setText(`Manage predefined values for ${this.property.name}`);
            FieldSettingsModal.removeValidationError(input);
        });
        return input;
    }
    createTogglerContainer(parentNode, label) {
        const propertyContainerLabel = parentNode.createDiv({
            cls: 'frontmatter-checkbox-toggler'
        });
        propertyContainerLabel.setText(label);
        const toggler = new obsidian.ToggleComponent(parentNode);
        toggler.setTooltip("Can this property have multiple values?");
        return toggler;
    }
    createListNoteContainer(parentNode) {
        const listNoteContainerLabel = parentNode.createDiv();
        listNoteContainerLabel.setText(`Path of the note containing the values:`);
        const input = new obsidian.TextComponent(parentNode);
        const listNotePath = this.property.valuesListNotePath;
        input.setValue(listNotePath);
        input.setPlaceholder("Path/of/the/note.md");
        input.onChange(value => this.property.valuesListNotePath = value);
        return input;
    }
    removePresetValue(key) {
        let newValues = {};
        for (let _key in this.property.values) {
            if (key !== _key) {
                newValues[_key] = this.property.values[_key];
            }
        }
        this.property.values = newValues;
    }
    createValueContainer(parentNode, header, key) {
        const values = this.property.values;
        const presetValue = values[key];
        const valueContainer = parentNode.createDiv({
            cls: 'frontmatter-prompt-container',
        });
        const input = new obsidian.TextComponent(valueContainer);
        input.setValue(presetValue);
        input.onChange(value => {
            this.property.values[key] = value;
            this.setValueListText(header);
            FieldSettingsModal.removeValidationError(input);
        });
        const valueRemoveButton = new obsidian.ButtonComponent(valueContainer);
        valueRemoveButton.setIcon("trash")
            .onClick((evt) => {
            evt.preventDefault;
            this.removePresetValue(key);
            this.setValueListText(header);
            parentNode.removeChild(valueContainer);
            this.valuesPromptComponents.remove(input);
        });
        if (key != Object.keys(this.property.values)[0]) {
            const valueUpgradeButton = new obsidian.ButtonComponent(valueContainer);
            valueUpgradeButton.setButtonText("▲");
            valueUpgradeButton.onClick((evt) => {
                const thisValue = values[key];
                const upperComponent = this.valuesPromptComponents[this.valuesPromptComponents.indexOf(input) - 1];
                if (upperComponent) {
                    const upperValue = upperComponent.inputEl.value;
                    const upperKey = Object.keys(values).filter(k => values[k] == upperValue)[0];
                    if (upperKey) {
                        upperComponent.setValue(thisValue);
                        values[upperKey] = thisValue;
                        input.setValue(upperValue);
                        values[key] = upperValue;
                    }
                }
            });
        }
        return input;
    }
    createForm() {
        const div = this.contentEl.createDiv({
            cls: "frontmatter-prompt-div"
        });
        const mainDiv = div.createDiv({
            cls: "frontmatter-prompt-form"
        });
        /* Property Name Section */
        const nameContainer = mainDiv.createDiv();
        this.namePromptComponent = this.createnameInputContainer(nameContainer);
        mainDiv.createDiv({ cls: 'frontmatter-separator' }).createEl("hr");
        /* Property is Multi section*/
        const multiContainer = mainDiv.createDiv();
        this.isMultiTogglerComponent = this.createTogglerContainer(multiContainer, "Is Multi: ");
        this.isMultiTogglerComponent.setValue(this.property.isMulti);
        this.isMultiTogglerComponent.onChange(value => {
            this.property.isMulti = value;
            if (this.property.isCycle && this.property.isMulti) {
                this.property.isCycle = false;
                this.isCycleTogglerComponent.setValue(false);
            }
        });
        mainDiv.createDiv({ cls: 'frontmatter-separator' }).createEl("hr");
        /* Property is Cycle section*/
        const cycleContainer = mainDiv.createDiv();
        this.isCycleTogglerComponent = this.createTogglerContainer(cycleContainer, "Is Cycle: ");
        this.isCycleTogglerComponent.setValue(this.property.isCycle);
        this.isCycleTogglerComponent.onChange(value => {
            this.property.isCycle = value;
            if (this.property.isCycle && this.property.isMulti) {
                this.property.isMulti = false;
                this.isMultiTogglerComponent.setValue(false);
            }
        });
        mainDiv.createDiv({ cls: 'frontmatter-separator' }).createEl("hr");
        /* Property's note for list of Values */
        const listNotePathContainer = mainDiv.createDiv();
        this.listNotePathComponent = this.createListNoteContainer(listNotePathContainer);
        mainDiv.createDiv({ cls: 'frontmatter-separator' }).createEl("hr");
        /* Property Values */
        const valuesList = mainDiv.createDiv();
        const valuesListHeader = valuesList.createDiv();
        valuesListHeader.createEl("h2");
        valuesListHeader.setText(`Preset values: ${Object.values(this.property.values).join(', ')}`);
        const valuesListBody = valuesList.createDiv();
        Object.keys(this.property.values).forEach(key => {
            this.valuesPromptComponents.push(this.createValueContainer(valuesListBody, valuesListHeader, key));
        });
        /* Add a new Values */
        const valuesListFooter = valuesList.createDiv();
        const addValue = valuesListFooter.createEl('button');
        addValue.type = 'button';
        addValue.textContent = 'Add';
        addValue.onClickEvent((evt) => {
            evt.preventDefault;
            this.property.insertNewValue("")
                .then(newKey => { this.createValueContainer(valuesListBody, valuesListHeader, newKey); });
        });
        mainDiv.createDiv({ cls: 'frontmatter-separator' }).createEl("hr");
        /* footer buttons*/
        const footerEl = this.contentEl.createDiv();
        const footerButtons = new obsidian.Setting(footerEl);
        footerButtons.addButton((b) => this.createSaveButton(b));
        footerButtons.addExtraButton((b) => this.createCancelButton(b));
    }
    createSaveButton(b) {
        b.setTooltip("Save")
            .setIcon("checkmark")
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            let error = false;
            if (/^[#>-]/.test(this.property.name)) {
                FieldSettingsModal.setValidationError(this.namePromptComponent, this.namePromptComponent.inputEl, "Property name cannot start with #, >, -");
                error = true;
            }
            if (this.property.name == "") {
                FieldSettingsModal.setValidationError(this.namePromptComponent, this.namePromptComponent.inputEl, "Property name can not be Empty");
                error = true;
            }
            this.valuesPromptComponents.forEach(input => {
                if (/^[#>-]/.test(input.inputEl.value)) {
                    FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot cannot start with #, >, -");
                    error = true;
                }
                if (/[,]/gu.test(input.inputEl.value)) {
                    FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values cannot contain a comma");
                    error = true;
                }
                if (input.inputEl.value == "") {
                    FieldSettingsModal.setValidationError(input, input.inputEl.parentElement.lastElementChild, "Values can't be null.");
                    error = true;
                }
            });
            if (error) {
                new obsidian.Notice("Fix errors before saving.");
                return;
            }
            this.saved = true;
            const currentExistingProperty = this.plugin.initialProperties.filter(p => p.id == this.property.id)[0];
            if (currentExistingProperty) {
                Field.copyProperty(currentExistingProperty, this.property);
            }
            else {
                this.plugin.initialProperties.push(this.property);
            }
            this.initialProperty = this.property;
            this.plugin.saveSettings();
            this.close();
        }));
        return b;
    }
    createCancelButton(b) {
        b.setIcon("cross")
            .setTooltip("Cancel")
            .onClick(() => {
            this.saved = false;
            /* reset values from settings */
            if (this.initialProperty.name != "") {
                Object.assign(this.property, this.initialProperty);
            }
            this.close();
        });
        return b;
    }
    /* utils functions */
    static setValidationError(textInput, insertAfter, message) {
        textInput.inputEl.addClass("is-invalid");
        if (message) {
            let mDiv = textInput.inputEl.parentElement.querySelector(".invalid-feedback");
            if (!mDiv) {
                mDiv = createDiv({ cls: "invalid-feedback" });
            }
            mDiv.innerText = message;
            mDiv.insertAfter(insertAfter);
        }
    }
    static removeValidationError(textInput) {
        if (textInput.inputEl.hasClass("is-invalid")) {
            textInput.inputEl.removeClass("is-invalid");
            textInput.inputEl.parentElement.removeChild(textInput.inputEl.parentElement.lastElementChild);
        }
    }
}

class SuperchargedLinksSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for Supercharged Links.' });
        /* Managing extra attirbutes for a.internal-link */
        new obsidian.Setting(containerEl)
            .setName('Target Attributes for styling')
            .setDesc('Frontmatter attributes to target, comma separated')
            .addTextArea((text) => {
            text
                .setPlaceholder('Enter attributes as string, comma separated')
                .setValue(this.plugin.settings.targetAttributes.join(', '))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.targetAttributes = value.replace(/\s/g, '').split(',');
                yield this.plugin.saveSettings();
            }));
            text.inputEl.rows = 6;
            text.inputEl.cols = 25;
        });
        /* Managing predefined values for properties */
        /* Manage menu options display*/
        new obsidian.Setting(containerEl)
            .setName("Display field options in context menu")
            .setDesc("Choose to show or hide fields options in the context menu of a link or a file")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.displayFieldsInContextMenu);
            toggle.onChange(value => {
                this.plugin.settings.displayFieldsInContextMenu = value;
                this.plugin.saveSettings();
            });
        });
        /* Exclude Fields from context menu*/
        new obsidian.Setting(containerEl)
            .setName('Ignored fields')
            .setDesc('Fields to be ignored by the plugin when adding options to the context menu')
            .addTextArea((text) => {
            text
                .setPlaceholder('Enter fields as string, comma separated')
                .setValue(this.plugin.settings.globallyIgnoredFields.join(', '))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.globallyIgnoredFields = value.replace(/\s/g, '').split(',');
                yield this.plugin.saveSettings();
            }));
            text.inputEl.rows = 6;
            text.inputEl.cols = 25;
        });
        /* Set classFiles Path*/
        new obsidian.Setting(containerEl)
            .setName('class Files path')
            .setDesc('Path to the files containing the authorized fields for a type of note')
            .addText((text) => {
            text
                .setPlaceholder('Path/')
                .setValue(this.plugin.settings.classFilesPath)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.classFilesPath = value;
                yield this.plugin.saveSettings();
            }));
        });
        /* Add new property for which we want to preset values*/
        new obsidian.Setting(containerEl)
            .setName("Add New Property Manager")
            .setDesc("Add a new Frontmatter property for which you want preset values.")
            .addButton((button) => {
            let b = button
                .setTooltip("Add New Property Manager")
                .setButtonText("+")
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                let modal = new FieldSettingsModal(this.app, this.plugin, containerEl);
                modal.open();
            }));
            return b;
        });
        /* Managed properties that currently have preset values */
        this.plugin.initialProperties.forEach(prop => {
            const property = new Field();
            Object.assign(property, prop);
            new FieldSetting(containerEl, property, this.app, this.plugin);
        });
    }
}

function clearLinkExtraAttributes(link) {
    Object.values(link.attributes).forEach(attr => {
        if (attr.name.startsWith("data-link")) {
            link.removeAttribute(attr.name);
        }
    });
}
function fetchFrontmatterTargetAttributes(app, settings, dest) {
    let new_props = {};
    return new Promise((resolve, reject) => {
        app.vault.cachedRead(dest).then((result) => {
            let foreHeadText = false;
            let frontmatterStart = false;
            let frontmatterEnd = false;
            let inFrontmatter = false;
            result.split('\n').map(line => {
                if (line != "---" && !foreHeadText && !frontmatterStart) {
                    foreHeadText = true;
                }
                if (line == "---" && !foreHeadText) {
                    if (!frontmatterStart) {
                        frontmatterStart = true;
                        inFrontmatter = true;
                    }
                    else if (!frontmatterEnd) {
                        frontmatterEnd = true;
                        inFrontmatter = false;
                    }
                }
                if (inFrontmatter) {
                    settings.targetAttributes.forEach(attribute => {
                        const regex = new RegExp(`${attribute}\\s*:\\s*(.*)`, 'u');
                        const regexResult = line.match(regex);
                        if (regexResult && regexResult.length > 1) {
                            const value = regexResult[1] ? regexResult[1].replace(/^\[(.*)\]$/, "$1").trim() : "";
                            new_props[attribute] = value;
                        }
                    });
                }
                else {
                    settings.targetAttributes.forEach(attribute => {
                        const regex = new RegExp('[_\*~\`]*' + attribute + '[_\*~`]*\s*::(.+)?', 'u');
                        const r = line.match(regex);
                        if (r && r.length > 0) {
                            const value = r[1] ? r[1].replace(/^\[(.*)\]$/, "$1").trim() : "";
                            new_props[attribute] = value;
                        }
                    });
                }
            });
            resolve(new_props);
        });
    });
}
function setLinkNewProps(link, new_props) {
    Object.keys(new_props).forEach(key => {
        link.setAttribute("data-link-" + key, new_props[key]);
    });
}
function updateLinkExtraAttributes(app, settings, link, destName) {
    const linkHref = link.getAttribute('href');
    const dest = app.metadataCache.getFirstLinkpathDest(linkHref, destName);
    if (dest) {
        fetchFrontmatterTargetAttributes(app, settings, dest).then(new_props => setLinkNewProps(link, new_props));
    }
}
function updateElLinks(app, settings, el, ctx) {
    const links = el.querySelectorAll('a.internal-link');
    const destName = ctx.sourcePath.replace(/(.*).md/, "$1");
    links.forEach((link) => {
        clearLinkExtraAttributes(link);
        updateLinkExtraAttributes(app, settings, link, destName);
    });
}
function updateVisibleLinks(app, settings) {
    fishAll("a.internal-link").forEach(internalLink => clearLinkExtraAttributes(internalLink));
    app.workspace.iterateRootLeaves((leaf) => {
        if (leaf.view instanceof obsidian.MarkdownView && leaf.view.file) {
            const file = leaf.view.file;
            const cachedFile = app.metadataCache.getFileCache(file);
            if (cachedFile.links) {
                cachedFile.links.forEach((link) => {
                    const fileName = file.path.replace(/(.*).md/, "$1");
                    const dest = app.metadataCache.getFirstLinkpathDest(link.link, fileName);
                    if (dest) {
                        fetchFrontmatterTargetAttributes(app, settings, dest).then(new_props => {
                            const internalLinks = leaf.view.containerEl.querySelectorAll(`a.internal-link[href="${link.link}"]`);
                            internalLinks.forEach((internalLink) => setLinkNewProps(internalLink, new_props));
                        });
                    }
                });
            }
        }
    });
}

const DEFAULT_SETTINGS = {
    targetAttributes: [],
    presetFields: [],
    displayFieldsInContextMenu: true,
    globallyIgnoredFields: [],
    classFilesPath: ""
};

class valueMultiSelectModal extends obsidian.Modal {
    constructor(app, file, name, initialValues, settings, lineNumber = -1, inFrontMatter = false, top = false) {
        super(app);
        this.app = app;
        this.file = file;
        this.name = name;
        this.settings = settings;
        this.values = initialValues ? initialValues.toString().replace(/^\[(.*)\]$/, "$1").split(",").map(item => item.trim()) : [];
        this.lineNumber = lineNumber;
        this.inFrontmatter = inFrontMatter;
        this.top = top;
    }
    onOpen() {
        const valueGrid = this.contentEl.createDiv({
            cls: "frontmatter-values-grid"
        });
        FieldSetting.getValuesListFromNote(this.settings.valuesListNotePath, this.app).then(listNoteValues => {
            this.populateValuesGrid(valueGrid, listNoteValues);
        });
    }
    buildValueToggler(valueGrid, presetValue) {
        const valueSelectorContainer = valueGrid.createDiv({
            cls: "frontmatter-value-selector-container"
        });
        const valueTogglerContainer = valueSelectorContainer.createDiv({
            cls: "frontmatter-value-selector-toggler"
        });
        const valueToggler = new obsidian.ToggleComponent(valueTogglerContainer);
        this.values.forEach(value => {
            if (value == presetValue) {
                valueToggler.setValue(true);
            }
        });
        valueToggler.onChange(value => {
            if (value && !this.values.includes(presetValue)) {
                this.values.push(presetValue);
            }
            if (!value) {
                this.values.remove(presetValue);
            }
        });
        const valueLabel = valueSelectorContainer.createDiv({
            cls: "frontmatter-value-selector-label"
        });
        valueLabel.setText(presetValue);
    }
    populateValuesGrid(valueGrid, listNoteValues) {
        Object.keys(this.settings.values).forEach(key => {
            const presetValue = this.settings.values[key];
            this.buildValueToggler(valueGrid, presetValue);
        });
        listNoteValues.forEach(value => {
            this.buildValueToggler(valueGrid, value);
        });
        const footer = this.contentEl.createDiv({
            cls: "frontmatter-value-grid-footer"
        });
        const saveButton = new obsidian.ButtonComponent(footer);
        saveButton.setIcon("checkmark");
        saveButton.onClick(() => {
            if (this.lineNumber == -1) {
                linkContextMenu.replaceFrontmatterAttribute(this.app, this.file, this.name, this.values.join(","));
            }
            else {
                this.app.vault.read(this.file).then(result => {
                    let newContent = [];
                    if (this.top) {
                        newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${this.values.join(",")}`);
                        result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
                    }
                    else {
                        result.split("\n").forEach((line, _lineNumber) => {
                            newContent.push(line);
                            if (_lineNumber == this.lineNumber) {
                                newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${this.values.join(",")}`);
                            }
                        });
                    }
                    this.app.vault.modify(this.file, newContent.join('\n'));
                    this.close();
                });
            }
            this.close();
        });
        const cancelButton = new obsidian.ExtraButtonComponent(footer);
        cancelButton.setIcon("cross");
        cancelButton.onClick(() => this.close());
    }
}

class valueTextInputModal extends obsidian.Modal {
    constructor(app, file, name, value, lineNumber = -1, inFrontMatter = false, top = false) {
        super(app);
        this.app = app;
        this.file = file;
        this.name = name;
        this.value = value;
        this.lineNumber = lineNumber;
        this.inFrontmatter = inFrontMatter;
        this.top = top;
    }
    onOpen() {
        const inputDiv = this.contentEl.createDiv({
            cls: "frontmatter-modal-value"
        });
        this.buildInputEl(inputDiv);
    }
    buildInputEl(inputDiv) {
        const form = inputDiv.createEl("form");
        form.type = "submit";
        form.onsubmit = (e) => {
            e.preventDefault();
            if (this.lineNumber == -1) {
                linkContextMenu.replaceFrontmatterAttribute(this.app, this.file, this.name, inputEl.getValue());
            }
            else {
                this.app.vault.read(this.file).then(result => {
                    let newContent = [];
                    if (this.top) {
                        newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${inputEl.getValue()}`);
                        result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
                    }
                    else {
                        result.split("\n").forEach((line, _lineNumber) => {
                            newContent.push(line);
                            if (_lineNumber == this.lineNumber) {
                                newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${inputEl.getValue()}`);
                            }
                        });
                    }
                    this.app.vault.modify(this.file, newContent.join('\n'));
                    this.close();
                });
            }
            this.close();
        };
        const inputEl = new obsidian.TextComponent(form);
        inputEl.setValue(this.value);
        inputEl.inputEl.addClass("frontmatter-prompt-input");
    }
}

class valueToggleModal$1 extends obsidian.Modal {
    constructor(app, file, name, value) {
        super(app);
        this.app = app;
        this.file = file;
        this.name = name;
        this.value = value;
    }
    onOpen() {
        const inputDiv = this.contentEl.createDiv({
            cls: "frontmatter-toggler"
        });
        this.buildInputEl(inputDiv);
    }
    buildInputEl(inputDiv) {
        const inputEl = new obsidian.ToggleComponent(inputDiv);
        inputEl.setValue(this.value);
        inputEl.onChange(v => {
            linkContextMenu.replaceFrontmatterAttribute(this.app, this.file, this.name, v ? "true" : "false");
        });
    }
}

class valueToggleModal extends obsidian.Modal {
    constructor(app, file, name, value, settings, lineNumber = -1, inFrontMatter = false, top = false) {
        super(app);
        this.app = app;
        this.file = file;
        this.name = name;
        this.value = value;
        this.settings = settings;
        this.newValue = null;
        this.lineNumber = lineNumber;
        this.inFrontmatter = inFrontMatter;
        this.top = top;
    }
    onOpen() {
        const inputDiv = this.contentEl.createDiv({
            cls: "frontmatter-modal-value"
        });
        this.buildInputEl(inputDiv);
    }
    buildInputEl(inputDiv) {
        const selectEl = new obsidian.DropdownComponent(inputDiv);
        selectEl.selectEl.addClass("frontmatter-select");
        const values = this.settings.values;
        selectEl.addOption("", "--Empty--");
        Object.keys(values).forEach(key => {
            selectEl.addOption(values[key], values[key]);
        });
        if (Object.values(values).includes(this.value)) {
            selectEl.setValue(this.value);
        }
        FieldSetting.getValuesListFromNote(this.settings.valuesListNotePath, this.app).then(listNoteValues => {
            listNoteValues.forEach(value => selectEl.addOption(value, value));
            if (listNoteValues.includes(this.value)) {
                selectEl.setValue(this.value);
            }
            selectEl.onChange(value => this.newValue = value != "--Empty--" ? value : "");
            const submitButton = new obsidian.ButtonComponent(inputDiv);
            submitButton.setTooltip("Save")
                .setIcon("checkmark")
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                if (this.lineNumber == -1) {
                    if (this.newValue || this.newValue == "") {
                        linkContextMenu.replaceFrontmatterAttribute(this.app, this.file, this.name, this.newValue);
                    }
                }
                else {
                    this.app.vault.read(this.file).then(result => {
                        let newContent = [];
                        if (this.top) {
                            newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${selectEl.getValue()}`);
                            result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
                        }
                        else {
                            result.split("\n").forEach((line, _lineNumber) => {
                                newContent.push(line);
                                if (_lineNumber == this.lineNumber) {
                                    newContent.push(`${this.name}${this.inFrontmatter ? ":" : "::"} ${selectEl.getValue()}`);
                                }
                            });
                        }
                        this.app.vault.modify(this.file, newContent.join('\n'));
                        this.close();
                    });
                }
                this.close();
            }));
        });
    }
}

class addNewFieldModal extends obsidian.Modal {
    constructor(plugin, lineNumber, file, inFrontmatter, top) {
        super(plugin.app);
        this.lineNumber = lineNumber;
        this.inFrontmatter = inFrontmatter;
        this.file = file;
        this.top = top;
    }
    onOpen() {
        this.titleEl.setText("Insert new field");
        const addNewFieldContainer = this.contentEl.createDiv();
        const nameInputContainer = addNewFieldContainer.createDiv();
        nameInputContainer.setText("Field Name: ");
        const nameInputEl = new obsidian.TextComponent(nameInputContainer);
        nameInputEl.setPlaceholder("Field name");
        const valueInputContainer = addNewFieldContainer.createDiv();
        valueInputContainer.setText("Field value: ");
        const valueInputEl = new obsidian.TextComponent(valueInputContainer);
        valueInputEl.setPlaceholder("Field value");
        const footerButtons = this.contentEl.createDiv({
            cls: 'frontmatter-textarea-buttons'
        });
        const saveButton = new obsidian.ButtonComponent(footerButtons);
        saveButton.setIcon("checkmark");
        saveButton.onClick(() => {
            this.app.vault.read(this.file).then(result => {
                let newContent = [];
                if (this.top) {
                    newContent.push(`${nameInputEl.getValue()}${this.inFrontmatter ? ":" : "::"} ${valueInputEl.getValue()}`);
                    result.split("\n").forEach((line, _lineNumber) => newContent.push(line));
                }
                else {
                    result.split("\n").forEach((line, _lineNumber) => {
                        newContent.push(line);
                        if (_lineNumber == this.lineNumber) {
                            newContent.push(`${nameInputEl.getValue()}${this.inFrontmatter ? ":" : "::"} ${valueInputEl.getValue()}`);
                        }
                    });
                }
                this.app.vault.modify(this.file, newContent.join('\n'));
                this.close();
            });
        });
        const cancelButton = new obsidian.ExtraButtonComponent(footerButtons);
        cancelButton.setIcon("cross");
        cancelButton.onClick(() => {
            this.close();
        });
    }
}

class fieldSelectModal extends obsidian.Modal {
    constructor(plugin, file, lineNumber, line, inFrontmatter, top) {
        super(plugin.app);
        this.line = line;
        this.lineNumber = lineNumber;
        this.plugin = plugin;
        this.file = file;
        this.inFrontmatter = inFrontmatter;
        this.top = top;
    }
    onOpen() {
        this.titleEl.setText(`Insert field after > ${this.line.substring(0, 20)}${this.line.length > 20 ? "..." : ""}`);
        const container = this.contentEl.createDiv();
        const settingsDropdownContainer = container.createDiv();
        const settingsSelector = new obsidian.DropdownComponent(settingsDropdownContainer);
        settingsSelector.addOption("---", "Choose Field");
        settingsSelector.addOption("++New", "New");
        this.plugin.settings.presetFields.forEach(setting => {
            settingsSelector.addOption(setting.name, setting.name);
        });
        settingsSelector.onChange(value => {
            if (value == "++New") {
                const newFieldModal = new addNewFieldModal(this.plugin, this.lineNumber, this.file, this.inFrontmatter, this.top);
                newFieldModal.open();
                this.close();
            }
            else {
                const field = this.plugin.settings.presetFields.filter(_field => _field.name == value)[0];
                if (field.valuesListNotePath || (field.values && Object.keys(field.values).length > 0)) {
                    if (field.isMulti) {
                        const fieldModal = new valueMultiSelectModal(this.app, this.file, field.name, "", field, this.lineNumber, this.inFrontmatter, this.top);
                        fieldModal.titleEl.setText(`Select values for ${value}`);
                        fieldModal.open();
                    }
                    else {
                        const fieldModal = new valueToggleModal(this.app, this.file, field.name, "", field, this.lineNumber, this.inFrontmatter, this.top);
                        fieldModal.titleEl.setText(`Select value for ${value}`);
                        fieldModal.open();
                    }
                }
                else {
                    const fieldModal = new valueTextInputModal(this.app, this.file, value, "", this.lineNumber, this.inFrontmatter, this.top);
                    fieldModal.titleEl.setText(`Enter value for ${value}`);
                    fieldModal.open();
                }
                this.close();
            }
        });
    }
}

class chooseSectionModal extends obsidian.Modal {
    constructor(plugin, file) {
        super(plugin.app);
        this.file = file;
        this.plugin = plugin;
    }
    onOpen() {
        this.titleEl.setText("Add a field in this note after:");
        const inputDiv = this.contentEl.createDiv({
            cls: "frontmatter-modal-value"
        });
        const selectEl = new obsidian.DropdownComponent(inputDiv);
        selectEl.selectEl.addClass("frontmatter-select");
        selectEl.addOption("", "Select line");
        selectEl.addOption("top_0", "top");
        this.app.vault.read(this.file).then(result => {
            let foreHeadText = false;
            let frontmatterStart = false;
            let frontmatterEnd = false;
            let inFrontmatter = false;
            result.split("\n").forEach((line, lineNumber) => {
                if (line != "---" && !foreHeadText && !frontmatterStart) {
                    foreHeadText = true;
                }
                if (line == "---" && !foreHeadText) {
                    if (!frontmatterStart) {
                        frontmatterStart = true;
                        inFrontmatter = true;
                    }
                    else if (!frontmatterEnd) {
                        frontmatterEnd = true;
                        inFrontmatter = false;
                    }
                }
                if (inFrontmatter) {
                    selectEl.addOption(`frontmatter_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
                }
                else {
                    selectEl.addOption(`body_${lineNumber}`, `${line.substring(0, 30)}${line.length > 30 ? "..." : ""}`);
                }
            });
            selectEl.onChange(value => {
                const valueArray = selectEl.getValue().match(/(\w+)_(\d+)/);
                const position = valueArray[1];
                const lineNumber = Number(valueArray[2]);
                const inFrontmatter = position == "frontmatter" ? true : false;
                const top = position == "top" ? true : false;
                const modal = new fieldSelectModal(this.plugin, this.file, lineNumber, result.split('\n')[lineNumber], inFrontmatter, top);
                this.close();
                modal.open();
            });
        });
    }
}

class linkContextMenu {
    constructor(plugin) {
        this.plugin = plugin;
        this.createContextMenu();
    }
    createContextMenu() {
        this.plugin.registerEvent(this.plugin.app.workspace.on('file-menu', (menu, abstractFile, source) => {
            if (this.plugin.settings.displayFieldsInContextMenu && (source === "link-context-menu" ||
                source === "calendar-context-menu" ||
                source === 'pane-more-options' ||
                source === 'file-explorer-context-menu')) {
                const files = this.plugin.app.vault.getMarkdownFiles().filter(mdFile => mdFile.path == abstractFile.path);
                if (files.length > 0) {
                    const file = files[0];
                    this.file = file;
                    this.getTargetFileAndCreateExtraOptionList(menu, abstractFile);
                }
            }
        }));
    }
    getTargetFileAndCreateExtraOptionList(menu, abstractFile) {
        const cache = this.plugin.app.metadataCache.getCache(abstractFile.path);
        if (cache.frontmatter) {
            const _a = cache.frontmatter, attributes = __rest(_a, ["position"]);
            Object.keys(attributes).forEach(key => {
                if (!this.plugin.settings.globallyIgnoredFields.includes(key)) {
                    delete attributes.key;
                }
            });
            menu.addSeparator();
            let fileClassForFields = false;
            let fileClassFields = [];
            if (Object.keys(attributes).includes('fileClass')) {
                const fileClass = attributes['fileClass'];
                const classFiles = this.plugin.app.vault.getMarkdownFiles().filter(mdFile => (mdFile.path == `${this.plugin.settings.classFilesPath}${fileClass}.md`));
                if (classFiles.length > 0) {
                    const classFile = classFiles[0];
                    fileClassForFields = true;
                    this.plugin.app.vault.read(classFile).then(result => {
                        result.split('\n').forEach(line => {
                            fileClassFields.push(line);
                        });
                        Object.keys(attributes).forEach(key => {
                            if (!fileClassFields.includes(key)) {
                                delete attributes.key;
                            }
                        });
                        this.createExtraOptionsListForFrontmatter(attributes, menu).then(() => {
                            this.createExtraOptionsListForInlineFields(this.file, menu, fileClassForFields, fileClassFields).then(() => {
                                menu.addSeparator();
                                this.addSectionSelectModalOption(this.plugin, menu);
                            });
                        });
                    });
                }
                else {
                    this.createExtraOptionsListForFrontmatter(attributes, menu).then(() => {
                        this.createExtraOptionsListForInlineFields(this.file, menu).then(() => {
                            menu.addSeparator();
                            this.addSectionSelectModalOption(this.plugin, menu);
                        });
                    });
                }
            }
            else {
                this.createExtraOptionsListForFrontmatter(attributes, menu).then(() => {
                    this.createExtraOptionsListForInlineFields(this.file, menu).then(() => {
                        menu.addSeparator();
                        this.addSectionSelectModalOption(this.plugin, menu);
                    });
                });
            }
        }
        else {
            this.createExtraOptionsListForInlineFields(this.file, menu).then(() => {
                menu.addSeparator();
                this.addSectionSelectModalOption(this.plugin, menu);
            });
        }
    }
    createExtraOptionsListForInlineFields(file, menu, fileClassForFields = false, fileClassFields = []) {
        return __awaiter(this, void 0, void 0, function* () {
            let attributes = {};
            const regex = new RegExp(/[_\*~`]*([0-9\w\p{Letter}\p{Emoji_Presentation}][-0-9\w\p{Letter}\p{Emoji_Presentation}\s]*)[_\*~`]*\s*::(.+)?/u);
            this.plugin.app.vault.read(file).then((result) => {
                result.split('\n').map(line => {
                    const regexResult = line.match(regex);
                    if (regexResult
                        && regexResult.length > 0
                        && !this.plugin.settings.globallyIgnoredFields.includes(regexResult[1].trim())) {
                        if (fileClassForFields) {
                            if (fileClassFields.includes(regexResult[1].trim())) {
                                attributes[regexResult[1].trim()] = regexResult.length > 1 && regexResult[2] ? regexResult[2].trim() : "";
                            }
                        }
                        else {
                            attributes[regexResult[1].trim()] = regexResult.length > 1 && regexResult[2] ? regexResult[2].trim() : "";
                        }
                    }
                });
                if (Object.keys(attributes).length > 0) {
                    menu.addSeparator();
                    this.createExtraOptionsList(attributes, menu);
                }
            });
        });
    }
    createExtraOptionsListForFrontmatter(attributes, menu) {
        return __awaiter(this, void 0, void 0, function* () {
            this.createExtraOptionsList(attributes, menu);
        });
    }
    createExtraOptionsList(attributes, menu) {
        Object.keys(attributes).forEach((key) => {
            const value = attributes[key];
            const propertySettings = this.getPropertySettings(key);
            if (propertySettings && propertySettings.values) {
                if (propertySettings.isCycle) {
                    this.addCycleMenuOption(menu, key, value, propertySettings);
                }
                else if (propertySettings.isMulti) {
                    this.addMultiMenuOption(menu, key, value, propertySettings);
                }
                else {
                    this.addSelectMenuOption(menu, key, value, propertySettings);
                }
            }
            else if (isBoolean(value) || /true/i.test(value) || /false/i.test(value)) {
                let toBooleanValue;
                if (isBoolean(value)) {
                    toBooleanValue = value;
                }
                else if (/true/i.test(value)) {
                    toBooleanValue = true;
                }
                else if (/false/i.test(value)) {
                    toBooleanValue = false;
                }
                this.addToggleMenuOption(menu, key, toBooleanValue);
            }
            else {
                this.addTextInputMenuOption(menu, key, value ? value.toString() : "");
            }
        });
    }
    addSectionSelectModalOption(plugin, menu) {
        const modal = new chooseSectionModal(this.plugin, this.file);
        menu.addItem((item) => {
            item.setIcon("pencil");
            item.setTitle("Add field at section...");
            item.onClick((evt) => {
                modal.open();
            });
        });
    }
    addCycleMenuOption(menu, name, value, propertySettings) {
        const values = propertySettings.values;
        const keys = Object.keys(values);
        const keyForValue = keys.find(key => values[key] === value);
        let nextValue;
        if (keyForValue) {
            const nextKey = keys[(keys.indexOf(keyForValue) + 1) % keys.length];
            nextValue = values[nextKey];
        }
        else {
            nextValue = values[Object.keys(values)[0]];
        }
        menu.addItem((item) => {
            item.setTitle(`${name} : ${value} ▷ ${nextValue}`);
            item.setIcon('switch');
            item.onClick((evt) => {
                linkContextMenu.replaceFrontmatterAttribute(this.plugin.app, this.file, name, nextValue);
            });
        });
    }
    addMultiMenuOption(menu, name, value, propertySettings) {
        const modal = new valueMultiSelectModal(this.plugin.app, this.file, name, value, propertySettings);
        modal.titleEl.setText("Select values");
        menu.addItem((item) => {
            item.setTitle(`Update ${name}`);
            item.setIcon('bullet-list');
            item.onClick((evt) => {
                modal.open();
            });
        });
    }
    addSelectMenuOption(menu, name, value, propertySettings) {
        const modal = new valueToggleModal(this.plugin.app, this.file, name, value, propertySettings);
        modal.titleEl.setText("Select value");
        menu.addItem((item) => {
            item.setTitle(`Update ${name}`);
            item.setIcon('right-triangle');
            item.onClick((evt) => modal.open());
        });
    }
    addToggleMenuOption(menu, name, value) {
        const modal = new valueToggleModal$1(this.plugin.app, this.file, name, value);
        modal.titleEl.setText(`Change Value for ${name}`);
        menu.addItem((item) => {
            item.setTitle(`Update ${name}`);
            item.setIcon('checkmark');
            item.onClick((evt) => { modal.open(); });
        });
    }
    addTextInputMenuOption(menu, name, value) {
        const modal = new valueTextInputModal(this.plugin.app, this.file, name, value);
        modal.titleEl.setText(`Change Value for ${name}`);
        menu.addItem((item) => {
            item.setTitle(`Update ${name}`);
            item.setIcon('pencil');
            item.onClick((evt) => modal.open());
        });
    }
    getPropertySettings(propertyName) {
        const matchingSettings = this.plugin.settings.presetFields.filter(p => p.name == propertyName);
        if (matchingSettings.length > 0) {
            return matchingSettings[0];
        }
    }
    static replaceFrontmatterAttribute(app, file, attribute, input) {
        return __awaiter(this, void 0, void 0, function* () {
            app.vault.read(file).then((result) => {
                let newContent = [];
                let foreHeadText = false;
                let frontmatterStart = false;
                let frontmatterEnd = false;
                let inFrontmatter = false;
                result.split('\n').map(line => {
                    if (line != "---" && !foreHeadText && !frontmatterStart) {
                        foreHeadText = true;
                    }
                    if (line == "---" && !foreHeadText) {
                        if (!frontmatterStart) {
                            frontmatterStart = true;
                            inFrontmatter = true;
                        }
                        else if (!frontmatterEnd) {
                            frontmatterEnd = true;
                            inFrontmatter = false;
                        }
                    }
                    if (inFrontmatter) {
                        const regex = new RegExp(`${attribute}:`, 'u');
                        const regexResult = line.match(regex);
                        if (regexResult && regexResult.length > 0) {
                            const inputArray = input ? input.replace(/(\,\s+)/g, ',').split(',') : [""];
                            const newValue = inputArray.length == 1 ? inputArray[0] : `[${inputArray.join(', ')}]`;
                            newContent.push(`${attribute}: ${newValue}`);
                        }
                        else {
                            newContent.push(`${line}`);
                        }
                    }
                    else {
                        const regex = new RegExp(`([_\*~\`]*)${attribute}([_\*~\`]*)(\\s*)::`, 'u');
                        const r = line.match(regex);
                        if (r && r.length > 0) {
                            const inputArray = input ? input.replace(/(\,\s+)/g, ',').split(',') : [""];
                            const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(', ')}`;
                            newContent.push(`${r[1]}${attribute}${r[2]}${r[3]}:: ${newValue}`);
                        }
                        else {
                            newContent.push(line);
                        }
                    }
                });
                app.vault.modify(file, newContent.join('\n'));
            });
        });
    }
}

class SuperchargedLinks extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.initialProperties = [];
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Supercharged links loaded');
            yield this.loadSettings();
            this.settings.presetFields.forEach(prop => {
                const property = new Field();
                Object.assign(property, prop);
                this.initialProperties.push(property);
            });
            this.addSettingTab(new SuperchargedLinksSettingTab(this.app, this));
            this.registerMarkdownPostProcessor((el, ctx) => {
                updateElLinks(this.app, this.settings, el, ctx);
            });
            this.app.metadataCache.on('changed', (_file) => {
                updateVisibleLinks(this.app, this.settings);
            });
            new linkContextMenu(this);
        });
    }
    onunload() {
        console.log('Supercharged links unloaded');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings.presetFields = this.initialProperties;
            yield this.saveData(this.settings);
        });
    }
}

module.exports = SuperchargedLinks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
